#include <dt-bindings/interrupt-controller/irq.h>
#include <dt-bindings/interrupt-controller/arm-gic.h>
#include <dt-bindings/phy/phy.h>

/ {
	compatible = "mediatek,mt6582";
	#address-cells = <1>;
	#size-cells = <1>;
	interrupt-parent = <&gic>;

	cpus {
		#address-cells = <1>;
		#size-cells = <0>;

		cpu0: cpu@0 {
			compatible = "arm,cortex-a7";
			device_type = "cpu";
			reg = <0x0>;
		};

		cpu1: cpu@1 {
			compatible = "arm,cortex-a7";
			device_type = "cpu";
			reg = <0x1>;
		};

		cpu2: cpu@2 {
			compatible = "arm,cortex-a7";
			device_type = "cpu";
			reg = <0x2>;
		};

		cpu3: cpu@3 {
			compatible = "arm,cortex-a7";
			device_type = "cpu";
			reg = <0x3>;
		};
	};

	clocks {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		system_clk: dummy13m {
			compatible = "fixed-clock";
			#clock-cells = <0>;
			clock-frequency = <13000000>;
		};

		rtc32k: oscillator-0 {
			compatible = "fixed-clock";
			#clock-cells = <0>;
			clock-frequency = <32000>;
			clock-output-names = "rtc32k";
		};

		clk26m: oscillator-1 {
			compatible = "fixed-clock";
			#clock-cells = <0>;
			clock-frequency = <26000000>;
			clock-output-names = "clk26m";
		};
	};
	
	wdt-reboot {
		compatible = "wdt-reboot";
		wdt = <&wdt>;
	};

	soc {
		#address-cells = <1>;
		#size-cells = <1>;
		compatible = "simple-bus";
		ranges;

		topckgen: clock-controller@10000000 {
			compatible = "mediatek,mt7623-topckgen";
			reg = <0x10000000 0x1000>;
			#clock-cells = <1>;
		};

		infracfg: syscon@10001000 {
			compatible = "mediatek,mt7623-infracfg", "syscon";
			reg = <0x10001000 0x1000>;
			#clock-cells = <1>;
		};
	
		pericfg: syscon@10003000 {
			compatible = "mediatek,mt7623-pericfg", "syscon";
			reg = <0x10003000 0x1000>;
			#clock-cells = <1>;
		};

		wdt: watchdog@10007000 {
			compatible = "mediatek,mt6589-wdt";
			reg = <0x10007000 0x100>;
			interrupts = <GIC_SPI 120 IRQ_TYPE_LEVEL_LOW>;
			timeout-sec = <15>;
		};
			
		gpt: timer@10008000 {
			compatible = "mediatek,mt6577-timer";
			reg = <0x10008000 0x80>;
			interrupts = <GIC_SPI 144 IRQ_TYPE_LEVEL_LOW>;
			clocks = <&system_clk>, <&rtc32k>;
			clock-names = "system-clk", "rtc32k";
		};
		
/*		apmixedsys: clock-controller@10205000 {
			compatible = "mediatek,mt7623-apmixedsys";
			reg = <0x10205000 0x1000>;
			#clock-cells = <1>;
		}; */

		gic: interrupt-controller@10211000 {
			compatible = "arm,cortex-a7-gic";
			interrupt-controller;
			#interrupt-cells = <3>;
			interrupt-parent = <&gic>;
			reg = <0x10211000 0x1000>,
			      <0x10212000 0x2000>,
			      <0x10214000 0x2000>,
			      <0x10216000 0x2000>;
		};
		
		pinctrl: pinctrl@10005000 {
			compatible = "mediatek,mt6572-pinctrl";
			reg = <0x10005000 0x1000>,
            <0x10014000 0x1000>,
            <0x10015000 0x1000>,
            <0x10016000 0x1000>,
            <0x10017000 0x1000>;
    	reg-names = "gpio", "iocfg_t", "iocfg_b", "iocfg_l", "iocfg_r";		
    	
    	gpio: gpio-controller {
        gpio-controller;
        #gpio-cells = <2>;
      };
		};
		
    pwrap: pwrap@1000f000 {
      compatible = "mediatek,mt6572-pwrap";
      reg = <0x1000f000 0x1000>;
    };

		uart0: serial@11002000 {
			compatible = "mediatek,mt6577-uart";
			reg = <0x11002000 0x400>;
			reg-shift = <2>;
			interrupts = <GIC_SPI 83 IRQ_TYPE_LEVEL_LOW>;
			// TODO: write a proper clock driver and nuke this
			clocks = <&clk26m>;
			status = "disabled";
		};

		uart1: serial@11003000 {
			compatible = "mediatek,mt6577-uart";
			reg = <0x11003000 0x400>;
			reg-shift = <2>;
			interrupts = <GIC_SPI 84 IRQ_TYPE_LEVEL_LOW>;
			// TODO: write a proper clock driver and nuke this
			clocks = <&clk26m>;
			status = "disabled";
		};

		uart2: serial@11004000 {
			compatible = "mediatek,mt6577-uart";
			reg = <0x11004000 0x400>;
			reg-shift = <2>;
			interrupts = <GIC_SPI 85 IRQ_TYPE_LEVEL_LOW>;
			// TODO: write a proper clock driver and nuke this
			clocks = <&clk26m>;
			status = "disabled";
		};

		uart3: serial@11005000 {
			compatible = "mediatek,mt6577-uart";
			reg = <0x11005000 0x400>;
			reg-shift = <2>;
			interrupts = <GIC_SPI 86 IRQ_TYPE_LEVEL_LOW>;
			// TODO: write a proper clock driver and nuke this
			clocks = <&clk26m>;
			status = "disabled";
		};
	};	
};
